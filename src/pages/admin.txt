//-------------------------------------- version เก่า ----------------------------------------------------

import { useState, useEffect, useCallback } from "react";
import liff from "@line/liff";
import { useNavigate } from "react-router-dom";
import { Clock, CheckCircle, XCircle, User, Phone, Calendar, MapPin, Users, Target, Settings, Loader2 } from "lucide-react";

// Mock data for all bookings (expanded dataset)
let allMockBookings = [];

const ITEMS_PER_PAGE = 5;

// Simulate API call for booking data (endpoint: /getMoreBooking/{page}?status={status})
const fetchBookingsApi = async (page, status) => {
  try {
    const newStatus = status.toLowerCase();

    const response = await fetch(
      `https://us-central1-booking-room-backend.cloudfunctions.net/app/getMoreBooking/${page}?status=${newStatus}`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    const json = await response.json();
    let filteredData = json.data.filter((b) => b.status === newStatus);

    // Sort by timestamp - newest first (แก้ไขให้เรียงจากใหม่ไปเก่า)
filteredData = filteredData.sort((a, b) => {
  // ตรวจสอบ timestamp ทั้ง _seconds และ seconds
  let timeA = 0;
  let timeB = 0;
  
  if (a.timestamp) {
    if (a.timestamp._seconds) {
      timeA = a.timestamp._seconds;
    } else if (a.timestamp.seconds) {
      timeA = a.timestamp.seconds;
    } else if (typeof a.timestamp === 'number') {
      timeA = a.timestamp;
    }
  }
  
  if (b.timestamp) {
    if (b.timestamp._seconds) {
      timeB = b.timestamp._seconds;
    } else if (b.timestamp.seconds) {
      timeB = b.timestamp.seconds;
    } else if (typeof b.timestamp === 'number') {
      timeB = b.timestamp;
    }
  }
  
  console.log(`Comparing: A(${timeA}) vs B(${timeB}), Result: ${timeB - timeA}`);
  return timeB - timeA; // เรียงจากใหม่ไปเก่า (timestamp มากกว่าขึ้นก่อน)
});

    console.log("Filtered data:", filteredData);

    const startIndex = (page - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    const paginatedData = filteredData.slice(startIndex, endIndex);

    return new Promise((resolve) => {
      setTimeout(() => {
        console.log(
          `Returning ${paginatedData.length} items for page ${page}, status: ${newStatus}`
        );
        resolve({
          paginatedData: filteredData,
          totalFiltered: json.totalItems,
        });
      }, 300);
    });
  } catch (error) {
    console.error("Error fetching bookings:", error);
    return {
      paginatedData: [],
      totalFiltered: 0,
    };
  }
};

// Simulate API call for status numbers (endpoint: /getStatusNumber)
const fetchStatusNumbersApi = async () => {
  try {
    const response = await fetch(
      "https://us-central1-booking-room-backend.cloudfunctions.net/app/getStatusNumber"
    );
    if (!response.ok) {
      throw new Error("Failed to fetch status numbers");
    }
    const data = await response.json();

    const counts = {};
    data.forEach((item) => {
      counts[item.status] = item.count;
    });

    return counts;
  } catch (error) {
    console.error("Error fetching status numbers:", error);
    return { pending: 0, success: 0, rejected: 0 };
  }
};

// API call to update booking status
const updateStatus = async (bookingId, status) => {
  try {
    const response = await fetch(
      `https://us-central1-booking-room-backend.cloudfunctions.net/app/updateState/${bookingId}?status=${status}`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();

    if (result.redirectUrl) {
      window.location.href = result.redirectUrl;
    }

    console.log("Status updated successfully:", result);
    return result;
  } catch (error) {
    console.error("Error updating status:", error);
    throw error;
  }
};

const AdminDashboard = () => {
  const [bookings, setBookings] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [filterStatus, setFilterStatus] = useState("Pending");
  const [pendingCount, setPendingCount] = useState(0);
  const [approvedCount, setApprovedCount] = useState(0);
  const [rejectedCount, setRejectedCount] = useState(0);
  const [loadingMore, setLoadingMore] = useState(false);
  const [initialLoading, setInitialLoading] = useState(false);
  const navigate = useNavigate();

  // line liff variables
  const [setUserId] = useState(null);
  const [setDisplayName] = useState("");

  // Function to fetch booking data based on page and status
  const fetchData = async (page, status, isInitial = false) => {
    if (isInitial) {
      setInitialLoading(true);
    } else {
      setLoadingMore(true);
    }

    const { paginatedData, totalFiltered } = await fetchBookingsApi(page, status);

    console.log("page:", page, "totalFiltered:", totalFiltered);

    setBookings((prev) => {
      let newBookings;
      
      if (page === 1) {
        newBookings = [...paginatedData];
      } else {
        newBookings = [...prev, ...paginatedData];
      }
      
      // เรียงข้อมูลใหม่ทั้งหมดหลังจากรวมแล้ว เพื่อให้แน่ใจว่าเรียงถูกต้อง
      newBookings = newBookings.sort((a, b) => {
        let timeA = 0;
        let timeB = 0;
        
        if (a.timestamp) {
          if (a.timestamp._seconds) {
            timeA = a.timestamp._seconds;
          } else if (a.timestamp.seconds) {
            timeA = a.timestamp.seconds;
          } else if (typeof a.timestamp === 'number') {
            timeA = a.timestamp;
          }
        }
        
        if (b.timestamp) {
          if (b.timestamp._seconds) {
            timeB = b.timestamp._seconds;
          } else if (b.timestamp.seconds) {
            timeB = b.timestamp.seconds;
          } else if (typeof b.timestamp === 'number') {
            timeB = b.timestamp;
          }
        }
        
        console.log(`Final sort - A(${timeA}) vs B(${timeB}), Result: ${timeB - timeA}`);
        return timeB - timeA; // ใหม่ไปเก่า
      });
      
      return newBookings;
    });

    const hasMoreData = page * ITEMS_PER_PAGE < totalFiltered;
    setHasMore(hasMoreData);

    if (isInitial) {
      setInitialLoading(false);
    } else {
      setLoadingMore(false);
    }
  };

  // เพิ่ม infinite scroll handler
  const handleScroll = useCallback(() => {
    if (loadingMore || !hasMore || initialLoading) return;

    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight;

    // เมื่อผู้ใช้เลื่อนลงมาใกล้ท้ายหน้า (เหลือ 100px)
    if (scrollTop + windowHeight >= documentHeight - 100) {
      const nextPage = currentPage + 1;
      console.log(`Auto loading more data - Next page: ${nextPage}, Current status: ${filterStatus}`);
      setCurrentPage(nextPage);
      fetchData(nextPage, filterStatus);
    }
  }, [loadingMore, hasMore, initialLoading, currentPage, filterStatus]);

  // เพิ่ม scroll event listener
  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [handleScroll]);

  const initializeLiff = async () => {
    try {
      await liff.init({ liffId: '2007708896-GDakVPe0' });

      if (liff.isLoggedIn()) {
        const profile = await liff.getProfile();
        setUserId(profile.userId);
        setDisplayName(profile.displayName);
        console.log(`User ID: ${profile.userId}, Display Name: ${profile.displayName}`);

        const res = await fetch(`https://us-central1-booking-room-backend.cloudfunctions.net/app/checkUserId/${profile.userId}`);

        if (res.status === 200) {
          const userData = await res.json();
          console.log("User found:", userData);
        } else {
          console.warn("User not found, redirecting...");
          navigate("/notfound");
        }

      } else {
        liff.login();
      }
    } catch (err) {
      console.error("LIFF initialization failed", err);
      setError(err.message);
      navigate("/notfound");
    }
  };

  // Effect to load initial data and re-fetch when filterStatus changes
  useEffect(() => {
    setCurrentPage(1);
    initializeLiff();
    fetchData(1, filterStatus, true);
  }, [filterStatus]);

  // Effect to fetch status numbers for summary cards
  useEffect(() => {
    const getStatusCounts = async () => {
      const counts = await fetchStatusNumbersApi();
      setPendingCount(counts.pending);
      setApprovedCount(counts.approved);
      setRejectedCount(counts.rejected);
    };
    getStatusCounts();
  }, [bookings]);

  const handleLoadMore = () => {
    const nextPage = currentPage + 1;
    console.log(
      `Loading more data - Next page: ${nextPage}, Current status: ${filterStatus}`
    );
    setCurrentPage(nextPage);
    fetchData(nextPage, filterStatus);
  };

  const openBookingDetails = (booking) => setSelectedBooking(booking);
  const closeBookingDetails = () => setSelectedBooking(null);

  const handleApprove = async (booking) => {
    try {
      await updateStatus(booking.id, "approved");

      const updatedBookings = allMockBookings.map((b) =>
        b.id === booking.id ? { ...b, status: "Approved" } : b
      );
      allMockBookings.splice(0, allMockBookings.length, ...updatedBookings);

      fetchData(1, filterStatus, true);
      fetchStatusNumbersApi().then((counts) => {
        setPendingCount(counts.pending);
        setApprovedCount(counts.approved);
        setRejectedCount(counts.rejected);
      });

      closeBookingDetails();
    } catch (error) {
      console.error("Failed to approve booking:", error);
      alert("เกิดข้อผิดพลาดในการอนุมัติ กรุณาลองใหม่อีกครั้ง");
    }
  };

  const handleReject = async (booking) => {
    try {
      await updateStatus(booking.id, "rejected");

      const updatedBookings = allMockBookings.map((b) =>
        b.id === booking.id ? { ...b, status: "Rejected" } : b
      );
      allMockBookings.splice(0, allMockBookings.length, ...updatedBookings);

      fetchData(1, filterStatus, true);
      fetchStatusNumbersApi().then((counts) => {
        setPendingCount(counts.pending);
        setApprovedCount(counts.approved);
        setRejectedCount(counts.rejected);
      });

      closeBookingDetails();
    } catch (error) {
      console.error("Failed to reject booking:", error);
      alert("เกิดข้อผิดพลาดในการปฏิเสธ กรุณาลองใหม่อีกครั้ง");
    }
  };

  const toDateString = (timestamp) => {
    if (!timestamp || !timestamp._seconds) return "Invalid date";
    const date = new Date(timestamp._seconds * 1000);
    return date.toLocaleString();
  };

  const getStatusBorderColor = (status) => {
    switch (status.toLowerCase()) {
      case 'pending': return 'border-l-amber-400';
      case 'approved': return 'border-l-green-400';
      case 'rejected': return 'border-l-red-400';
      default: return 'border-l-gray-400';
    }
  };

  // ฟังก์ชันตรวจสอบการจองซ้ำ
  const checkOverlappingBookings = (currentBooking, allBookings) => {
    const overlapping = allBookings.filter(booking => {
      // ไม่เปรียบเทียบกับตัวเอง
      if (booking.id === currentBooking.id || booking.booker === currentBooking.booker) return false;
      
      // ต้องเป็นห้องเดียวกันและวันเดียวกัน
      if (booking.selectedRoom !== currentBooking.selectedRoom || booking.date !== currentBooking.date) return false;
      
      // ต้องเป็น approved หรือ pending เท่านั้น (ไม่นับ rejected)
      if (booking.status.toLowerCase() === 'rejected') return false;
      
      // แปลงเวลาเป็น minutes เพื่อเปรียบเทียบ
      const currentStart = convertTimeToMinutes(currentBooking.startTime);
      const currentEnd = convertTimeToMinutes(currentBooking.endTime);
      const bookingStart = convertTimeToMinutes(booking.startTime);
      const bookingEnd = convertTimeToMinutes(booking.endTime);
      
      // ตรวจสอบว่าเวลาทับซ้อนกันไหม
      return (currentStart < bookingEnd && currentEnd > bookingStart);
    });
    
    return overlapping;
  };

  // ฟังก์ชันแปลงเวลาเป็น minutes
  const convertTimeToMinutes = (timeString) => {
    if (!timeString) return 0;
    const [hours, minutes] = timeString.split(':').map(Number);
    return hours * 60 + minutes;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* Header */}
      <div className="bg-white">
        <div className="pb-4">
          <div className="bg-[#A12B30] text-white px-6 py-4">
            <h4 className="text-xl font-bold">Booking Admin</h4>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="px-4 pb-6 space-y-6">
        {/* Summary Cards - แบบเล็กและไอคอนซ้าย */}
        <div className="grid grid-cols-2 gap-4">
          {/* Pending Card */}
          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center mr-3">
                <Clock className="w-5 h-5 text-amber-600" />
              </div>
              <div>
                <p className="text-sm font-medium text-amber-700 mb-1">Pending</p>
                <p className="text-xl font-bold text-amber-800">{pendingCount || 0}</p>
              </div>
            </div>
          </div>

          {/* Approved Card */}
          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mr-3">
                <CheckCircle className="w-5 h-5 text-green-600" />
              </div>
              <div>
                <p className="text-sm font-medium text-green-700 mb-1">Approved</p>
                <p className="text-xl font-bold text-green-800">{approvedCount || 0}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="bg-white rounded-lg shadow-sm overflow-hidden">
          <div className="flex">
            {["Pending", "Approved", "Rejected"].map((status) => (
              <button
                key={status}
                className={`flex-1 px-4 py-3 text-sm font-medium transition-all duration-200 ${
                  filterStatus === status
                    ? "bg-red-800 text-white border-b-2 border-red-800"
                    : "text-gray-600 hover:bg-gray-50"
                }`}
                onClick={() => setFilterStatus(status)}
              >
                {status} (
                {
                  {
                    Pending: pendingCount || 0,
                    Approved: approvedCount || 0,
                    Rejected: rejectedCount || 0,
                  }[status]
                }
                )
              </button>
            ))}
          </div>
        </div>

        {/* Booking List */}
        <div className="space-y-3">
          {initialLoading ? (
            <div className="flex justify-center items-center py-12 bg-white rounded-lg">
              <Loader2 className="w-8 h-8 text-red-600 animate-spin mr-3" />
              <span className="text-gray-600">กำลังโหลดข้อมูล...</span>
            </div>
          ) : bookings.length > 0 ? (
            <>
              {bookings.map((booking, index) => {
                const overlappingBookings = checkOverlappingBookings(booking, bookings);
                const hasOverlap = overlappingBookings.length > 0;
                
                return (
                <div
                  key={booking.booker + index}
                  className={`bg-white rounded-lg shadow-sm border-l-4 ${getStatusBorderColor(booking.status)} cursor-pointer hover:shadow-md transition-all duration-200 transform hover:scale-[1.01] ${hasOverlap ? 'ring-2 ring-red-200' : ''}`}
                  onClick={() => openBookingDetails(booking)}
                >
                  <div className="p-4">
                    <div className="flex items-start">
                      <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white font-bold text-lg mr-4">
                        {booking.booker[0].toUpperCase()}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-start justify-between mb-2">
                          <div>
                            <h6 className="font-bold text-gray-900">{booking.booker}</h6>
                            <p className="text-sm text-gray-600">Tel: {booking.phone}</p>
                          </div>
                          <div className="flex flex-col items-end space-y-1">
                            <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                              booking.status.toLowerCase() === 'pending' ? 'bg-amber-100 text-amber-800' :
                              booking.status.toLowerCase() === 'approved' ? 'bg-green-100 text-green-800' :
                              'bg-red-100 text-red-800'
                            }`}>
                              {booking.status}
                            </span>
                            {hasOverlap && (
                              <span className="px-2 py-1 bg-red-100 text-red-600 rounded-full text-xs font-bold">
                                ซ้ำ
                              </span>
                            )}
                          </div>
                        </div>
                        <div className="space-y-1 text-sm text-gray-600">
                          <p>ห้อง: {booking.selectedRoom || "undefined"}</p>
                          <p>วันที่: {booking.date}</p>
                          <p>เวลา: {booking.startTime} - {booking.endTime}</p>
                          <p className="text-xs text-gray-500">จองเมื่อ: {toDateString(booking.timestamp)}</p>
                        </div>
                      </div>
                    </div>
                    {/* เตือนการจองซ้ำ */}
                    {hasOverlap && (
                      <div className="mt-4 p-2 bg-red-50 border border-red-200 rounded-lg">
                        <div className="flex items-center">
                          <div className="w-5 h-5 bg-red-500 rounded-full flex items-center justify-center mr-2">
                            <span className="text-white text-xs font-bold">!</span>
                          </div>
                          <span className="text-red-700 text-sm font-medium">
                            มีการจองซ้ำ ({overlappingBookings.length} รายการ)
                          </span>
                        </div>
                        <div className="mt-1 ml-7 text-xs text-red-600">
                          ซ้ำกับ: {overlappingBookings.map(b => b.booker).join(', ')}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )})}


              {/* Loading Indicator เมื่อกำลัง load ข้อมูลแบบอัตโนมัติ */}
              {loadingMore && (
                <div className="flex justify-center py-6">
                  <div className="flex items-center">
                    <Loader2 className="w-6 h-6 text-red-600 animate-spin mr-3" />
                    <span className="text-gray-600">กำลังโหลดข้อมูลเพิ่มเติม...</span>
                  </div>
                </div>
              )}

              {/* Load More Button with Red Loading Circle - ยังคงไว้สำหรับผู้ที่ต้องการคลิกเอง */}
              {hasMore && !loadingMore && (
                <div className="flex justify-center pt-4">
                  <button
                    className="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors duration-200 flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed min-w-[140px] justify-center"
                    onClick={handleLoadMore}
                  >
                    Load More
                  </button>
                </div>
              )}
            </>
          ) : (
            <div className="text-center py-12 bg-white rounded-lg">
              <Calendar className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <p className="text-gray-500">ไม่มีรายการจอง</p>
            </div>
          )}
        </div>
      </div>

      {/* Modal */}
      {selectedBooking && (
        <div className="fixed inset-0  bg-[rgba(128,128,128,0.5)] bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl shadow-2xl w-full max-w-md max-h-[90vh] overflow-y-auto">
            {/* Modal Header */}
            <div className="flex justify-between items-center p-6 border-b border-gray-200">
              <h3 className="text-xl font-bold text-gray-900">รายละเอียดการจอง</h3>
              <button
                className="w-8 h-8 rounded-full hover:bg-gray-200 flex items-center justify-center transition-colors"
                onClick={closeBookingDetails}
              >
                <XCircle className="w-5 h-5 text-gray-600" />
              </button>
            </div>

            {/* Modal Body */}
            <div className="p-6">
              {/* User Info */}
              <div className="flex items-center mb-6">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white font-bold text-2xl mr-4">
                  {selectedBooking.booker[0].toUpperCase()}
                </div>
                <div>
                  <h4 className="text-lg font-bold text-gray-900">{selectedBooking.booker}</h4>
                  <p className="text-gray-600">{selectedBooking.phone || "N/A"}</p>
                  <p className="text-sm text-gray-500">จองเมื่อ: {toDateString(selectedBooking.timestamp)}</p>
                </div>
              </div>

              {/* Details */}
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gray-50 rounded-lg p-3">
                    <p className="text-sm text-gray-600 mb-1">ห้อง</p>
                    <p className="font-semibold">{selectedBooking.selectedRoom || "undefined"}</p>
                  </div>
                  <div className="bg-gray-50 rounded-lg p-3">
                    <p className="text-sm text-gray-600 mb-1">วันที่</p>
                    <p className="font-semibold">{selectedBooking.date}</p>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gray-50 rounded-lg p-3">
                    <p className="text-sm text-gray-600 mb-1">เวลา</p>
                    <p className="font-semibold">{selectedBooking.startTime} - {selectedBooking.endTime}</p>
                  </div>
                  <div className="bg-gray-50 rounded-lg p-3">
                    <p className="text-sm text-gray-600 mb-1">ระยะเวลา</p>
                    <p className="font-semibold">
                      {new Date(`2000/01/01 ${selectedBooking.endTime}`).getHours() - 
                       new Date(`2000/01/01 ${selectedBooking.startTime}`).getHours()} ชั่วโมง
                    </p>
                  </div>
                </div>

                <div className="bg-gray-50 rounded-lg p-3">
                  <p className="text-sm text-gray-600 mb-1">ผู้เข้าร่วม</p>
                  <p className="font-semibold">{selectedBooking.attendees || "ไม่ระบุ"}</p>
                </div>

                <div className="bg-gray-50 rounded-lg p-3">
                  <p className="text-sm text-gray-600 mb-1">วัตถุประสงค์</p>
                  <p className="font-semibold">{selectedBooking.activity || "ไม่ระบุ"}</p>
                </div>

                <div className="bg-gray-50 rounded-lg p-3">
                  <p className="text-sm text-gray-600 mb-1">อุปกรณ์ที่ขอ</p>
                  <p className="font-semibold">{selectedBooking.specialRequests || "ไม่ระบุ"}</p>
                </div>
              </div>
            </div>

            {/* Modal Actions */}
            <div className="p-6 border-t border-gray-200">
              {selectedBooking.status.toLowerCase() === "pending" ? (
                <div className="flex gap-3">
                  <button
                    className="flex-1 bg-green-600 text-white py-3 rounded-lg font-bold hover:bg-green-700 transition-colors"
                    onClick={() => handleApprove(selectedBooking)}
                  >
                    อนุมัติ
                  </button>
                  <button
                    className="flex-1 bg-red-600 text-white py-3 rounded-lg font-bold hover:bg-red-700 transition-colors"
                    onClick={() => handleReject(selectedBooking)}
                  >
                    ปฏิเสธ
                  </button>
                </div>
              ) : (
                <div className="text-center">
                  <span className={`inline-flex px-4 py-2 rounded-full text-sm font-bold ${
                    selectedBooking.status.toLowerCase() === 'approved' ? 'bg-green-100 text-green-800' :
                    'bg-red-100 text-red-800'
                  }`}>
                    สถานะ: {selectedBooking.status}
                  </span>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminDashboard;